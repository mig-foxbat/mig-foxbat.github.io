<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>foxbat</title><link href="http://blog.foobarbaz.info/" rel="alternate"></link><link href="http://blog.foobarbaz.info/feeds/jvm.atom.xml" rel="self"></link><id>http://blog.foobarbaz.info/</id><updated>2016-01-03T00:00:00-08:00</updated><entry><title>Dag processing</title><link href="http://blog.foobarbaz.info/dag-processing.html" rel="alternate"></link><updated>2016-01-03T00:00:00-08:00</updated><author><name>Charles</name></author><id>tag:blog.foobarbaz.info,2016-01-03:dag-processing.html</id><summary type="html">&lt;p&gt;Identifying cyclic dependencies in DAG might sound intimidating but it is quite simple.
In this article I will be showing to do it via Topological sorting. Topological sorting is simply the process of Linearizing a DAG. If Graph is cyclic your Topological sorting will fail (cannot proceed). &lt;/p&gt;
&lt;h4&gt;How the it works&lt;/h4&gt;
&lt;p&gt;Lets say you have Graph called &lt;code&gt;unsorted_graph&lt;/code&gt; as shown in the below image. You now traverse your graph starting with nodes that don't have any dependencies (no incoming edges). In our example these nodes will be Node A and G. Node A and G are removed from &lt;code&gt;unsorted_graph&lt;/code&gt; and moved to our new target graph &lt;code&gt;sorted_graph&lt;/code&gt;.  Then again the source graph is queried for free nodes with no dependencies (no incoming edges). This time it will Node B (since Node A is already removed from the graph) and it will placed into the new graph preserving its dependency with A. The process is repeated untill there are no more nodes in your source graph.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Directed Acyclic Graph" src="/images/dag/dag.svg" /&gt;&lt;/p&gt;
&lt;h4&gt;Identify cyclic dependencies&lt;/h4&gt;
&lt;p&gt;In case of a DAG we would navigate all its nodes and we would created a new sorted graph. But if we had cyclic dependencies in our graph, We would go to point sooner or later where there are no more free nodes in the graph but the graph still has two or more nodes left in it. We get caught in a classic deadlock scenario where all nodes dependent on someother nodes in the graph and there are no free nodes anymore. &lt;/p&gt;
&lt;h5&gt;Code snippet&lt;/h5&gt;
&lt;p&gt;Below is a functional, immutable and tail recursive implementation of topological sorting of graphs in scala.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;case class Node(id: Int, dependencies: List[Node] = List()) {

  def this(id: Int, node: Node) = this(id,List(node))

  override def equals(that: Any): Boolean = {
    that match {
      case node: Node =&amp;gt; node.id == this.id
      case _ =&amp;gt; false
    }
  }

  override def toString = {
    s&amp;quot;$id -&amp;gt; ${(dependencies map {_.id}).mkString(&amp;quot;,&amp;quot;)}&amp;quot;
  }

}

class Dag(val graph: List[Node]) {

  def sort(): Dag = {
    new Dag(topSort(graph))
  }

  @tailrec
  private def topSort(unsorted_graph: List[Node], sorted_graph: List[Node] = Nil):List[Node] = {
    (unsorted_graph ,sorted_graph) match {
      case (Nil,a) =&amp;gt;  a
      case _ =&amp;gt; {
        val open_nodes = unsorted_graph collect {
          case node @ Node(_,Nil) =&amp;gt; node
          case node @ Node(_, dependencies) if dependencies forall { sorted_graph contains _ } =&amp;gt; node
        }
        if (open_nodes isEmpty) { throw new RuntimeException(&amp;quot;Cycles Detected in DAG&amp;quot;)}
        topSort(unsorted_graph filterNot { open_nodes contains _  },sorted_graph ++ open_nodes)
      }
    }
  }

  override def toString = {
    this.graph.toString()
  }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Sample Execution&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    val nodes = Node(1,Nil) :: Node(2,List(Node(1))) :: Node(3,List(Node(1))) :: Node(4,List(Node(2),Node(3))) ::
      Node(6,Nil) :: Node(5,List(Node(4),Node(6))) :: Nil
    val dag = new Dag(nodes) 
    println(dag.sort().toString)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category><category term="DAG"></category><category term="sorting"></category></entry><entry><title>Scala collection functions</title><link href="http://blog.foobarbaz.info/scala-collection-functions.html" rel="alternate"></link><updated>2015-05-31T00:00:00-07:00</updated><author><name>Charles</name></author><id>tag:blog.foobarbaz.info,2015-05-31:scala-collection-functions.html</id><summary type="html">&lt;p&gt;Scala collections library has an impressive arsenal of functions to process sequences in a functional approach. Only a very few are being listed down here.&lt;/p&gt;</summary><category term="scala"></category><category term="collections"></category></entry><entry><title>Ebean encryption</title><link href="http://blog.foobarbaz.info/ebean-encryption.html" rel="alternate"></link><updated>2015-05-26T00:00:00-07:00</updated><author><name>Charles</name></author><id>tag:blog.foobarbaz.info,2015-05-26:ebean-encryption.html</id><summary type="html">&lt;p&gt;If you want to encrypt a database field and you happen to use Play-Framework 2.x, Mysql and Ebean for ORM, this blog post will help you achieve just that.&lt;/p&gt;
&lt;p&gt;Now the best way to achieve this is to use &lt;code&gt;@encrypt&lt;/code&gt; JPA annotation on the model field. Using this annotation would be make the process of encryption/decryption completely transparent to the rest of your codebase. Apart from the model class no other part of your code has to be aware of this process. So for example if you are encrypting a field called password in your model this is how it would look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    @Encrypted
    public String password;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Though the field's type is String, the corresponding database field type won't be &lt;code&gt;CHAR&lt;/code&gt; or &lt;code&gt;VARCHAR&lt;/code&gt; as you would expect. Since we are encrypting the field, database type will be binary or byte or another equivalent type supported by the database. For My-SQL it was &lt;code&gt;VARBINARY&lt;/code&gt;. If you want to override the type to say &lt;code&gt;VARCHAR&lt;/code&gt; you can use the JPA annotion property like this &lt;code&gt;@Column(columnDefinition="varchar(50)")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now any reversible encryption/decryption algorithm requires a key this key was supposed to be set by defining the key in applications.conf file or ebean.properties file in your Play application. But due to a yet to be resolved bug in the framework we will have to take a work around as posted in this &lt;a href="http://stackoverflow.com/questions/15800453/play-framework-2-1-java-ebean-encrypted-annotation-errors"&gt;SO Post&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.avaje.ebean.config.ServerConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.avaje.ebean.event.ServerConfigStartup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.avaje.ebean.config.EncryptKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.avaje.ebean.config.EncryptKeyManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomServerConfigStartup&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ServerConfigStartup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="nd"&gt;@Override&lt;/span&gt; 
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServerConfig&lt;/span&gt; &lt;span class="n"&gt;serverConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     
          &lt;span class="n"&gt;serverConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setEncryptKeyManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BasicEncryptKeyManager&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;     
    &lt;span class="p"&gt;}&lt;/span&gt;     
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicEncryptKeyManager&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;EncryptKeyManager&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 

 &lt;span class="nd"&gt;@Override&lt;/span&gt; 
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;EncryptKey&lt;/span&gt; &lt;span class="n"&gt;getEncryptKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CustomEncryptKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     
 &lt;span class="p"&gt;}&lt;/span&gt; 

 &lt;span class="nd"&gt;@Override&lt;/span&gt; 
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initialise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomEncryptKey&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;EncryptKey&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 

   &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CustomEncryptKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tableName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="nd"&gt;@Override&lt;/span&gt; 
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getStringValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application.secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;::&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tableName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;::&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
 &lt;span class="p"&gt;}&lt;/span&gt;     
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure this new class is defined in the same package where your target model (the one where compression is applied) is located. Make note that this encryption is supported by Ebean only for String and Date fields of your model. Now if you had to say manually decrypt and encrypted field from your SQL client or vice versa you can use the following SQL queries.&lt;/p&gt;
&lt;h5&gt;decrypt:&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SELECT CAST(AES_DECRYPT(encrypted-field,'my-encryption-key') as CHAR(50)) from table;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;encrypt:&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SELECT AES_ENCRYPT(encrypted-field,'my-encryption-key') from table;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In case you are using H2-database for development, use the below queries.&lt;/p&gt;
&lt;h5&gt;decrypt:&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SELECT TRIM(CHAR(0) FROM UTF8TOSTRING(DECRYPT('AES', STRINGTOUTF8('&amp;lt;encryption-key&amp;gt;'), '&amp;lt;text to be encrypted&amp;gt;'))) from table&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;encrypt:&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SELECT ENCRYPT('AES', STRINGTOUTF8('&amp;lt;encryption-key&amp;gt;'), STRINGTOUTF8('&amp;lt;text to be encrypted&amp;gt;')) from table;&lt;/code&gt;&lt;/p&gt;</summary><category term="play"></category><category term="ebean"></category><category term="java"></category></entry><entry><title>Scala primer</title><link href="http://blog.foobarbaz.info/scala-primer.html" rel="alternate"></link><updated>2015-05-05T00:00:00-07:00</updated><author><name>Charles</name></author><id>tag:blog.foobarbaz.info,2015-05-05:scala-primer.html</id><summary type="html">&lt;p&gt;This Scala primer is not intended as a study material for someone new to Scala but as a refresher for someone who hasn't worked on the technology for a while. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the type parameter starts with a lowercase then it means the type parameter is unknown. it is semantically equal to a type parameter as underscore.  ie &lt;code&gt;ClassName[t] == ClassName[_]&lt;/code&gt;. use this if you want to use the classname without specifying the type parameter. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;== operator (which is a method) simply calls equals which is logical equality. there is a separate method called eq which looks for object identity.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;empty parantheses () is a synonym for Unit data type. Unlike other languages like Python empty data is not Falsy. ie &lt;code&gt;"" != false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Tuple is not a collection in Scala and they can no more then 22 elements. And since it is not a collection it is not iterable.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{ expression block }&lt;/code&gt; can contain a series of expression and it returns the last expression. It can be used inlieu of a single expression. expression blocks can be nested too.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;for an if statement without the else counterpart, on failure condition the return type is Unit (descendant of AnyVal). This explains the below.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;scala&amp;gt; val a = if (true) { 10 } // LHS is AnyVal and not Int
a: AnyVal = 10

scala&amp;gt; val a = if (true) { &amp;quot;&amp;quot; } // LHS is Any and not String
a: Any = &amp;quot;&amp;quot; 
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;case match supports multiple patterns with Pipe operator.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;scala&amp;gt; val kind = day match {
 case &amp;quot;MON&amp;quot; | &amp;quot;TUE&amp;quot; | &amp;quot;WED&amp;quot; | &amp;quot;THU&amp;quot; | &amp;quot;FRI&amp;quot; =&amp;gt;
 &amp;quot;weekday&amp;quot;
 case &amp;quot;SAT&amp;quot; | &amp;quot;SUN&amp;quot; =&amp;gt;
 &amp;quot;weekend&amp;quot;
 }
kind: String = weekday
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;procedure is a function that has a return type of Unit. which means it a fully side-effecting function. A function definition without the equal sign means it is a procedure and would ignore the last expression and always return Unit data type.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;if a function is defined without paramaters/parentheses then it has to be called without parentheses. i.e. def test = { } has to be called &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;test()&lt;/code&gt; is not allowed. in these cases if you want to access the function object without invoking the function then you will have to do something like &lt;code&gt;val a = greet _&lt;/code&gt;. Here you are creating a partially applied function for greet. Another alternative here is to explicitly set the type of val a. ie. val a:Int=&amp;gt;String = greet.similarly consider this curried function &lt;code&gt;def add(a:Int)(b:Int)&lt;/code&gt;. now to create a partially applied function you would have make the call as something like this &lt;code&gt;val a = add(10)(_)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@annotation.tailrec&lt;/code&gt; use this annotation to ensure tail recursion in a function. If compiler cannot enforce tail recursion optimization then a compile time failure is launched.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;varargs parameter are supported. eg: &lt;code&gt;def test(a:Int*)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Even type parameter of a function is optional if it can be inferred. 
  for eg: &lt;code&gt;def identity[A](a:A) = a  can be called as val a = identity(“string”).&lt;/code&gt;
  here both the type parameter of the function and as well as the return type of val a are both inferred. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;The infix or operator notation famous for one argument object methods like &lt;code&gt;a + b = a.+(b)&lt;/code&gt; can also be used for methods with two parameters like this &lt;code&gt;a + (b,c) = a.+(b,c)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;A function with single parameter can be expressed with type &lt;code&gt;Int =&amp;gt; Int&lt;/code&gt;. But function with no parameters require an empty parentheses &lt;code&gt;() =&amp;gt; Int&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;function definition and literal forms&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; // one parameter example
      def act(s:String,f:String=&amp;gt;String) = f(s)
      act(&amp;quot;Hello&amp;quot;,(a:String) =&amp;gt; a.reverse) full form
      act(&amp;quot;Hello&amp;quot;,a =&amp;gt; a.reverse) shorter type inferred form
      act(&amp;quot;Hello&amp;quot;,_.reverse) placeholder form
 // two parameter example
     def act(s1:String,s2:String,f:(String,String)=&amp;gt;String) = f(s1,s2)
     act(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;,(a:String,b:String) =&amp;gt; a+b) 
     act(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;,(a,b) =&amp;gt; a+b) 
     act(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;,_+_) 
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Partial applied functions can be created with placeholder syntax. for eg&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def add(a:Int,b:Long) = a+b
val p1 = add(10,_:Int)
p1(20)
val p2 = add(20,_:Long)
p2(30)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the palceholder parameters requires explicit type since there is chance of ambiguity due to overloaded method. ie we must unambigously select add(Int,Int) instead of a potential overloaded method add(Int,String)&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;By-name function parameters are denoted with an additional arrow like &lt;code&gt;def func1(a: =&amp;gt; Int) = println(a)&lt;/code&gt;. func1 is not a higher order function that takes function value as argument that returns int as the function definition seems to suggest. The argument can either be a function that returns an Int or can be a direct value Int. if it is a function then the function is evaluated (ie called) everytime when the function is referenced in the func1 method body. &lt;div class="highlight"&gt;&lt;pre&gt;def func1(a: =&amp;gt; Int) = println(a)
val a = () =&amp;gt; 10
val b = (a:Int) =&amp;gt; a
func1(a()) # prints 10
func1(b(10)) # prints 10
func1(10) # prints 10
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Partially applied functions and Partial functions are two different things in Scala. former is a function which has currently defined only a partial list of parameters and yet to define the other parameters. The latter is a function which has restrictions on the values it can accept for the defined parameters. A Partial Function object must have two methods &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;isDefinedAt&lt;/code&gt; defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;a case block statement without a match is a partial function literal. &lt;code&gt;{ case i: Int if i != 0 =&amp;gt; i}&lt;/code&gt; is equivalent to &lt;code&gt;new PartialFunction[Int,Int] { def apply(a:Int) = a; def isDefinedAt(a:Int) = a!=0 }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Nil is singleton instance of List[Nothing]. And since Nothing is a subtype of every other type Nil is an empty list of any type&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apply,unapply and update are special methods in scala. if class called Test had these methods defined on them then&lt;/p&gt;
&lt;p&gt;apply =&amp;gt; called on Test()&lt;/p&gt;
&lt;p&gt;unapply =&amp;gt; called when used with pattern matching&lt;/p&gt;
&lt;p&gt;update =&amp;gt; called on assignment Test(10) = “Some Value”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;The Scala collections hierarchy as shown below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="http://docs.scala-lang.org/resources/images/collections.mutable.png" alt="Class Hierarchy" style="width: 500px;"/&gt;&lt;/p&gt;</summary><category term="scala"></category></entry></feed>