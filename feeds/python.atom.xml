<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>foxbat</title><link href="http://blog.foobarbaz.info/" rel="alternate"></link><link href="http://blog.foobarbaz.info/feeds/python.atom.xml" rel="self"></link><id>http://blog.foobarbaz.info/</id><updated>2015-05-16T00:00:00-07:00</updated><entry><title>Attribute access methods</title><link href="http://blog.foobarbaz.info/attribute-access-methods.html" rel="alternate"></link><updated>2015-05-16T00:00:00-07:00</updated><author><name>Charles</name></author><id>tag:blog.foobarbaz.info,2015-05-16:attribute-access-methods.html</id><summary type="html">&lt;p&gt;This blog post is about the magic methods related to attribute access in python. This knowledge is would help you learning advanced concepts such as properties, descriptor, slots etc. 
Here I when I classes I refer to new-style classes which are classes that inherit &lt;code&gt;object&lt;/code&gt; in Python2 (either directly or indirectly) and All classes in Python3. &lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;getattr&lt;/strong&gt;:&lt;/h5&gt;
&lt;p&gt;This method is called when accessing an un-defined attribute in an object. 
The attribute is searched in self instance object, type's class object and its entire inheritence chain before invoking the &lt;code&gt;__getattr__&lt;/code&gt; method.
&lt;code&gt;__getattr__&lt;/code&gt; and all attribute access methods like &lt;code&gt;__setattr__&lt;/code&gt;,&lt;code&gt;__delattr__&lt;/code&gt;,&lt;code&gt;__getattribute__&lt;/code&gt; is effective even if one of the parent class implements these method.
if a class in inheritence chain has custom &lt;code&gt;__getattr__&lt;/code&gt; (or anyone of the attribute access method) defined and you dont want this behaviour then you can revert to normal behaviour by overridding the method with the default behaviou&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Test2&lt;/span&gt;(&lt;span class="n"&gt;Test1&lt;/span&gt;):
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__getattr__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="nb"&gt;name&lt;/span&gt;):
    &lt;span class="n"&gt;object&lt;/span&gt;.&lt;span class="n"&gt;__getattr__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="nb"&gt;name&lt;/span&gt;) 
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;&lt;strong&gt;setattr&lt;/strong&gt;:&lt;/h5&gt;
&lt;p&gt;Unlike &lt;code&gt;__getattr__&lt;/code&gt;, &lt;code&gt;__setattr__&lt;/code&gt; is called on attribute assignment irrespective of whether the attribute is already defined or not.
Be cautious of using &lt;code&gt;__setattr__&lt;/code&gt; because an assignment in &lt;code&gt;__setattr__&lt;/code&gt; on &lt;code&gt;self&lt;/code&gt; causes infinite recursion like shown below.
To avoid infinite recursion you should use &lt;code&gt;__dict__&lt;/code&gt; based assignment. In &lt;code&gt;__dict__&lt;/code&gt; based assignment you are not assigning to self but on &lt;code&gt;__dict__&lt;/code&gt;. surprisingly &lt;code&gt;setattr&lt;/code&gt; builtin function is not an alternative to &lt;code&gt;__dict__&lt;/code&gt; based assignment and it using it would also cause infinite recursion.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;TestClass&lt;/span&gt;():
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__setattr__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="nb"&gt;name&lt;/span&gt;,&lt;span class="nb"&gt;value&lt;/span&gt;):
    &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;value&lt;/span&gt; &lt;span class="c-Singleline"&gt;### This will cause infinite recursion&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__dict__&lt;/span&gt; = {&lt;span class="n"&gt;name:value&lt;/span&gt;} &lt;span class="c-Singleline"&gt;### This will cause infinite recursion&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__dict__&lt;/span&gt;[&lt;span class="nb"&gt;name&lt;/span&gt;] = &lt;span class="nb"&gt;value&lt;/span&gt; &lt;span class="c-Singleline"&gt;### this will not cause infinite recursion since this is an assignment on __dict__ and not on self i.e the object.&lt;/span&gt;
    &lt;span class="n"&gt;setattr&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="nb"&gt;name&lt;/span&gt;) =  &lt;span class="nb"&gt;value&lt;/span&gt; &lt;span class="c-Singleline"&gt;### this will also cause infinite recursion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;&lt;strong&gt;delattr&lt;/strong&gt;:&lt;/h5&gt;
&lt;p&gt;This method is similar to &lt;code&gt;__setattr__&lt;/code&gt; but called on attribute deletion. &lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;getattribute&lt;/strong&gt;:&lt;/h5&gt;
&lt;p&gt;This method is available only in new style classes. This method is called on any attribute access irrespective of it being defined or un-defined.
This is the method that delegates the call to &lt;code&gt;__getattr__&lt;/code&gt; on undefined attribute access. Hence if you override &lt;code&gt;__getattribute__&lt;/code&gt; make sure you either explicitly call &lt;code&gt;__getattr__&lt;/code&gt; or raise an AttributeError exception on undefined attribute access.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Python Unicode and Bytestrings</title><link href="http://blog.foobarbaz.info/python-unicode-and-bytestrings.html" rel="alternate"></link><updated>2015-05-08T00:00:00-07:00</updated><author><name>Charles</name></author><id>tag:blog.foobarbaz.info,2015-05-08:python-unicode-and-bytestrings.html</id><summary type="html">&lt;p&gt;Python Strings encoding.&lt;/p&gt;
&lt;p&gt;One of the major transformations in Python from 2.X to 3.X is with Strings and how unicode data is handled. Ned Batchelder gave an excellent session about this on Pycon-2012. I will provide a brief summary about it in this blog post but I would urge you to watch the emmbedded video of the session given at the end of this blog.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python has two types of strings called byte-string and unicode and both subclass from type base-string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;byte-string has series of bytes to represent strings which the computers can understand. The byte-strings are usually encoded in ascii by default. this default can be deduced by the below snippet&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unicode is not an encoding scheme like ASCII,UTF-8 or UTF-16. The latter provides a mapping between each character and the byte(s) that should be represented with. Whereas unicode provides an abstract concept called code points for each character symbols. for eg: the code point of pound symbol (ยฃ) is &lt;code&gt;\u00A3&lt;/code&gt;. Computers cannot understand unicode code-points. They require encoding schemes like UTF-8,UTF-32 or iso-8859-1 (Latin1) encoding schemes that translates these code-points to bytestreams.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python unicode-string type is a string of unicode codepoints and byte-string is a string of byte array with a specific encoding. You can convert a unicode-string to a byte-string with encode function passing the encoding to be used as a parameter like this &lt;code&gt;u'รง'.encode('utf8')&lt;/code&gt;. The unicode-string as an additional decode function but you will mostly never use it and hence ignore it for now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly a byte-string can be converted to unicode-string with decode operation like this &lt;code&gt;'\xc3\xa7'.decode('utf8')&lt;/code&gt;. The decode function takes the encoding to be used and it must be the same encoding which was used to encode this byte-string. Usually you wouldn't use the encode operation on byte string since it is already encoded but yet this function is available in byte-string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Python 2.X the byte-string is the default string and when used along with unicode the byte-string would implicitly convert to unicode using the default encoding. In 3.X the unicode is the default string and you need to prefix bystrings with b prefix like this &lt;code&gt;b'Hello'&lt;/code&gt;. In 3.X the conversion between unicode and bytestring is no longer implicit and must be handled by the programmer with &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt; functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/sgHbC6udIqc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="python"></category></entry></feed>